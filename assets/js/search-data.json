{
  
    
        "post0": {
            "title": "제목!!!!!!",
            "content": "import pandas as pd import numpy as np . 주가 = [ np.random.randint(10, 50) + i*2 for i in range(100) ] . import matplotlib.pyplot as plt plt.plot(np.arange(1, 101), 주가) plt.plot() plt.show() . &#46373;&#47084;&#45789; . 독립 = pd.DataFrame(np.arange(1, 101)) 종속 = pd.DataFrame(주가) 독립.shape, 종속.shape . ((100, 1), (100, 1)) . 독립 종속 . import tensorflow as tf . X = tf.keras.layers.Input(shape=[1]) # 독립변수의 col Y = tf.keras.layers.Dense(1)(X) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 4/4 [==============================] - 0s 3ms/step - loss: 126.9111 Epoch 2/10 4/4 [==============================] - 0s 2ms/step - loss: 126.9060 Epoch 3/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8780 Epoch 4/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8718 Epoch 5/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8839 Epoch 6/10 4/4 [==============================] - 0s 3ms/step - loss: 126.9415 Epoch 7/10 4/4 [==============================] - 0s 3ms/step - loss: 126.9017 Epoch 8/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8589 Epoch 9/10 4/4 [==============================] - 0s 3ms/step - loss: 126.9249 Epoch 10/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8568 . &lt;tensorflow.python.keras.callbacks.History at 0x7f5cd83122d0&gt; . model.predict([50]) model.predict([40]) . array([[106.269516]], dtype=float32) . model.predict(독립) . model.get_weights() . [array([[2.018191]], dtype=float32), array([25.541872], dtype=float32)] . 2.018191 * 50 + 25.541872 . 126.451422 . model.predict([50]) . array([[126.45142]], dtype=float32) . plt.plot(np.arange(1, 101), 주가) plt.plot(np.arange(1, 101), 2.01 * np.arange(1, 101) + 25.54) plt.plot() plt.show() . 오차값 = 종속 - model.predict(독립) 오차값 . 오차값의제곱 = 오차값 ** 2 오차값의제곱 . (오차값의제곱.sum())/100 ## MSE . 0 126.856588 dtype: float64 . &#52572;&#49548; &#51228;&#44273;&#48277; . y = ax + b | 참고자료 : https://ko.wikipedia.org/wiki/%EC%B5%9C%EC%86%8C%EC%A0%9C%EA%B3%B1%EB%B2%95 | . ${ displaystyle a={ frac {n Sigma XY- Sigma X Sigma Y}{n Sigma X^{2}- Sigma X Sigma X}}}$ . ${ displaystyle b={ frac { Sigma X^{2} Sigma Y- Sigma X Sigma XY}{n Sigma X^{2}- Sigma X Sigma X}}}$ . 두수의곱 = 독립*종속 int(100 * 두수의곱.sum()) . 81242700 . int(독립.sum() * 종속.sum()) . 64862200 . int(100 * (독립 ** 2).sum()) . 33835000 . int(독립.sum() * 독립.sum()) . 25502500 . 분자 = int(100 * 두수의곱.sum()) - int(독립.sum() * 종속.sum()) 분모 = int(100 * (독립 ** 2).sum()) - int(독립.sum() * 독립.sum()) . 분자 / 분모 . 1.965856585658566 . model.get_weights() . [array([[2.018191]], dtype=float32), array([25.541872], dtype=float32)] . ${ displaystyle b={ frac { Sigma X^{2} Sigma Y- Sigma X Sigma XY}{n Sigma X^{2}- Sigma X Sigma X}}}$ . 분자 = ((독립**2).sum() * 종속.sum()) - (독립.sum() * (독립*종속).sum()) 분모 = (100 * (독립**2).sum()) - (독립.sum() * 독립.sum()) . 분자 / 분모 . 0 29.164242 dtype: float64 . &#45800;&#49692;&#45936;&#51060;&#53552;&#51032; &#55176;&#46304;&#47112;&#51060;&#50612; . 매출액 = [2, 5, 10, 20, 40, 80] 광고액 = [1, 2, 4, 6, 8, 10] 순익 = [1, 1.5, 3, 10, 20, 60] . plt.plot(np.arange(1, 7), 매출액, label=&#39;a&#39;) plt.plot(np.arange(1, 7), 광고액, label=&#39;b&#39;) plt.plot(np.arange(1, 7), 순익, label=&#39;c&#39;) plt.legend() plt.show() . 독립 = pd.DataFrame({ &#39;매출액&#39; : 매출액, &#39;광고액&#39; : 광고액 }) 종속 = pd.DataFrame({ &#39;순익&#39; : 순익 }) 독립.shape, 종속.shape . ((6, 2), (6, 1)) . 독립 . 매출액 광고액 . 0 2 | 1 | . 1 5 | 2 | . 2 10 | 4 | . 3 20 | 6 | . 4 40 | 8 | . 5 80 | 10 | . X = tf.keras.layers.Input(shape=[2]) # 독립변수의 col H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(X) H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) Y = tf.keras.layers.Dense(1)(H) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 1/1 [==============================] - 0s 5ms/step - loss: 0.0776 Epoch 2/10 1/1 [==============================] - 0s 4ms/step - loss: 0.0645 Epoch 3/10 1/1 [==============================] - 0s 9ms/step - loss: 0.0776 Epoch 4/10 1/1 [==============================] - 0s 4ms/step - loss: 0.0645 Epoch 5/10 1/1 [==============================] - 0s 4ms/step - loss: 0.0776 Epoch 6/10 1/1 [==============================] - 0s 5ms/step - loss: 0.0645 Epoch 7/10 1/1 [==============================] - 0s 6ms/step - loss: 0.0776 Epoch 8/10 1/1 [==============================] - 0s 5ms/step - loss: 0.0645 Epoch 9/10 1/1 [==============================] - 0s 5ms/step - loss: 0.0776 Epoch 10/10 1/1 [==============================] - 0s 6ms/step - loss: 0.0644 . &lt;tensorflow.python.keras.callbacks.History at 0x7f5cd2eb8f90&gt; . model.get_weights() . [array([[ 0.13907404, -1.1992804 , -0.08514377, 0.19539104, 1.0607067 ], [ 0.1503897 , 0.25351313, 0.9445721 , 1.2783636 , -0.09151014]], dtype=float32), array([-2.128808 , 0.84849983, -1.1009531 , -1.4451069 , 1.6059966 ], dtype=float32), array([[ 0.9668759 , -2.189831 , -1.4160697 , -2.2861729 , -0.7814767 ], [-1.069848 , -2.9271662 , -0.82397777, -1.1014566 , 0.27123564], [ 1.3336539 , -1.0783886 , 0.9553802 , -0.49265176, -1.6961937 ], [ 0.8207123 , 0.04261134, -0.38079157, -0.60807854, 0.7596081 ], [-0.39332125, -0.23819275, 0.01834385, 0.00498553, 1.0490127 ]], dtype=float32), array([-1.0256203, 1.294643 , 1.319705 , 1.3473282, 1.5829551], dtype=float32), array([[-2.6935904], [ 1.7977272], [-6.8405094], [ 1.5219707], [ 0.572388 ]], dtype=float32), array([1.5798413], dtype=float32)] . model.predict([[10, 4]]) . array([[3.1647365]], dtype=float32) . model.predict(독립) . array([[ 1.0387847], [ 1.5659081], [ 3.1647375], [10.137856 ], [20.576534 ], [60.284546 ]], dtype=float32) . 종속 . 순익 . 0 1.0 | . 1 1.5 | . 2 3.0 | . 3 10.0 | . 4 20.0 | . 5 60.0 | . plt.plot(np.arange(1, 7), model.predict(독립)) plt.plot(np.arange(1, 7), 종속) plt.show() . &#48373;&#51105; &#45936;&#51060;&#53552;&#51032; &#55176;&#46304;&#47112;&#51060;&#50612; . 그럼 주가는 잘 맞출까? (곡선 형태) | . import numpy as np import pandas as pd import matplotlib.pyplot as plt 광고액 = [ np.random.randint(10, 50) + np.log(i*5) * 50 for i in range(1, 101) ] 계절성 = [ np.sin(i/3)*100 + i*3 + j*2 for i, j in zip(np.arange(1, 101), 광고액) ] 매출액 = [i**(np.log(np.log(i))) + j for i, j in zip(np.arange(1, 101), 계절성) ] plt.plot(np.arange(1, 101), 광고액, label=&#39;a&#39;) plt.plot(np.arange(1, 101), 계절성, label=&#39;b&#39;) plt.plot(np.arange(1, 101), 매출액, label=&#39;c&#39;) plt.legend() plt.show() . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: RuntimeWarning: divide by zero encountered in log import sys . 독립 = pd.DataFrame({ &#39;계절성&#39; : 계절성, &#39;광고액&#39; : 광고액 }) 종속 = pd.DataFrame({ &#39;매출액&#39; : 매출액 }) 독립.shape, 종속.shape . ((100, 2), (100, 1)) . import tensorflow as tf #모델 준비 X = tf.keras.layers.Input(shape=[2]) # 독립변수의 col H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(X) H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) Y = tf.keras.layers.Dense(1)(H) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 4/4 [==============================] - 0s 3ms/step - loss: 41707.3164 Epoch 2/10 4/4 [==============================] - 0s 3ms/step - loss: 42124.0352 Epoch 3/10 4/4 [==============================] - 0s 3ms/step - loss: 41490.3359 Epoch 4/10 4/4 [==============================] - 0s 4ms/step - loss: 41539.5781 Epoch 5/10 4/4 [==============================] - 0s 5ms/step - loss: 41851.1367 Epoch 6/10 4/4 [==============================] - 0s 3ms/step - loss: 41690.7344 Epoch 7/10 4/4 [==============================] - 0s 4ms/step - loss: 42086.4453 Epoch 8/10 4/4 [==============================] - 0s 4ms/step - loss: 41468.6836 Epoch 9/10 4/4 [==============================] - 0s 2ms/step - loss: 41834.9766 Epoch 10/10 4/4 [==============================] - 0s 3ms/step - loss: 41542.3516 . &lt;tensorflow.python.keras.callbacks.History at 0x7f05ee2c5710&gt; . plt.plot(np.arange(1, 101), model.predict(독립)) plt.plot(np.arange(1, 101), 종속) plt.show() .",
            "url": "https://paullabkorea.github.io/jupyternotebookblog/fastpages/jupyter/test/testtwo/2021/07/05/_07_01_%EC%97%85%EB%A1%9C%EB%93%9C_%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9.html",
            "relUrl": "/fastpages/jupyter/test/testtwo/2021/07/05/_07_01_%EC%97%85%EB%A1%9C%EB%93%9C_%ED%85%8C%EC%8A%A4%ED%8A%B8%EC%9A%A9.html",
            "date": " • Jul 5, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "제목!!",
            "content": "import pandas as pd import numpy as np . 주가 = [ np.random.randint(10, 50) + i*2 for i in range(100) ] . import matplotlib.pyplot as plt plt.plot(np.arange(1, 101), 주가) plt.plot() plt.show() . &#46373;&#47084;&#45789; . 독립 = pd.DataFrame(np.arange(1, 101)) 종속 = pd.DataFrame(주가) 독립.shape, 종속.shape . ((100, 1), (100, 1)) . 독립 종속 . import tensorflow as tf . X = tf.keras.layers.Input(shape=[1]) # 독립변수의 col Y = tf.keras.layers.Dense(1)(X) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 4/4 [==============================] - 0s 3ms/step - loss: 126.9111 Epoch 2/10 4/4 [==============================] - 0s 2ms/step - loss: 126.9060 Epoch 3/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8780 Epoch 4/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8718 Epoch 5/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8839 Epoch 6/10 4/4 [==============================] - 0s 3ms/step - loss: 126.9415 Epoch 7/10 4/4 [==============================] - 0s 3ms/step - loss: 126.9017 Epoch 8/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8589 Epoch 9/10 4/4 [==============================] - 0s 3ms/step - loss: 126.9249 Epoch 10/10 4/4 [==============================] - 0s 3ms/step - loss: 126.8568 . &lt;tensorflow.python.keras.callbacks.History at 0x7f5cd83122d0&gt; . model.predict([50]) model.predict([40]) . array([[106.269516]], dtype=float32) . model.predict(독립) . model.get_weights() . [array([[2.018191]], dtype=float32), array([25.541872], dtype=float32)] . 2.018191 * 50 + 25.541872 . 126.451422 . model.predict([50]) . array([[126.45142]], dtype=float32) . plt.plot(np.arange(1, 101), 주가) plt.plot(np.arange(1, 101), 2.01 * np.arange(1, 101) + 25.54) plt.plot() plt.show() . 오차값 = 종속 - model.predict(독립) 오차값 . 오차값의제곱 = 오차값 ** 2 오차값의제곱 . (오차값의제곱.sum())/100 ## MSE . 0 126.856588 dtype: float64 . &#52572;&#49548; &#51228;&#44273;&#48277; . y = ax + b | 참고자료 : https://ko.wikipedia.org/wiki/%EC%B5%9C%EC%86%8C%EC%A0%9C%EA%B3%B1%EB%B2%95 | . ${ displaystyle a={ frac {n Sigma XY- Sigma X Sigma Y}{n Sigma X^{2}- Sigma X Sigma X}}}$ . ${ displaystyle b={ frac { Sigma X^{2} Sigma Y- Sigma X Sigma XY}{n Sigma X^{2}- Sigma X Sigma X}}}$ . 두수의곱 = 독립*종속 int(100 * 두수의곱.sum()) . 81242700 . int(독립.sum() * 종속.sum()) . 64862200 . int(100 * (독립 ** 2).sum()) . 33835000 . int(독립.sum() * 독립.sum()) . 25502500 . 분자 = int(100 * 두수의곱.sum()) - int(독립.sum() * 종속.sum()) 분모 = int(100 * (독립 ** 2).sum()) - int(독립.sum() * 독립.sum()) . 분자 / 분모 . 1.965856585658566 . model.get_weights() . [array([[2.018191]], dtype=float32), array([25.541872], dtype=float32)] . ${ displaystyle b={ frac { Sigma X^{2} Sigma Y- Sigma X Sigma XY}{n Sigma X^{2}- Sigma X Sigma X}}}$ . 분자 = ((독립**2).sum() * 종속.sum()) - (독립.sum() * (독립*종속).sum()) 분모 = (100 * (독립**2).sum()) - (독립.sum() * 독립.sum()) . 분자 / 분모 . 0 29.164242 dtype: float64 . &#45800;&#49692;&#45936;&#51060;&#53552;&#51032; &#55176;&#46304;&#47112;&#51060;&#50612; . 매출액 = [2, 5, 10, 20, 40, 80] 광고액 = [1, 2, 4, 6, 8, 10] 순익 = [1, 1.5, 3, 10, 20, 60] . plt.plot(np.arange(1, 7), 매출액, label=&#39;a&#39;) plt.plot(np.arange(1, 7), 광고액, label=&#39;b&#39;) plt.plot(np.arange(1, 7), 순익, label=&#39;c&#39;) plt.legend() plt.show() . 독립 = pd.DataFrame({ &#39;매출액&#39; : 매출액, &#39;광고액&#39; : 광고액 }) 종속 = pd.DataFrame({ &#39;순익&#39; : 순익 }) 독립.shape, 종속.shape . ((6, 2), (6, 1)) . 독립 . 매출액 광고액 . 0 2 | 1 | . 1 5 | 2 | . 2 10 | 4 | . 3 20 | 6 | . 4 40 | 8 | . 5 80 | 10 | . X = tf.keras.layers.Input(shape=[2]) # 독립변수의 col H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(X) H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) Y = tf.keras.layers.Dense(1)(H) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 1/1 [==============================] - 0s 5ms/step - loss: 0.0776 Epoch 2/10 1/1 [==============================] - 0s 4ms/step - loss: 0.0645 Epoch 3/10 1/1 [==============================] - 0s 9ms/step - loss: 0.0776 Epoch 4/10 1/1 [==============================] - 0s 4ms/step - loss: 0.0645 Epoch 5/10 1/1 [==============================] - 0s 4ms/step - loss: 0.0776 Epoch 6/10 1/1 [==============================] - 0s 5ms/step - loss: 0.0645 Epoch 7/10 1/1 [==============================] - 0s 6ms/step - loss: 0.0776 Epoch 8/10 1/1 [==============================] - 0s 5ms/step - loss: 0.0645 Epoch 9/10 1/1 [==============================] - 0s 5ms/step - loss: 0.0776 Epoch 10/10 1/1 [==============================] - 0s 6ms/step - loss: 0.0644 . &lt;tensorflow.python.keras.callbacks.History at 0x7f5cd2eb8f90&gt; . model.get_weights() . [array([[ 0.13907404, -1.1992804 , -0.08514377, 0.19539104, 1.0607067 ], [ 0.1503897 , 0.25351313, 0.9445721 , 1.2783636 , -0.09151014]], dtype=float32), array([-2.128808 , 0.84849983, -1.1009531 , -1.4451069 , 1.6059966 ], dtype=float32), array([[ 0.9668759 , -2.189831 , -1.4160697 , -2.2861729 , -0.7814767 ], [-1.069848 , -2.9271662 , -0.82397777, -1.1014566 , 0.27123564], [ 1.3336539 , -1.0783886 , 0.9553802 , -0.49265176, -1.6961937 ], [ 0.8207123 , 0.04261134, -0.38079157, -0.60807854, 0.7596081 ], [-0.39332125, -0.23819275, 0.01834385, 0.00498553, 1.0490127 ]], dtype=float32), array([-1.0256203, 1.294643 , 1.319705 , 1.3473282, 1.5829551], dtype=float32), array([[-2.6935904], [ 1.7977272], [-6.8405094], [ 1.5219707], [ 0.572388 ]], dtype=float32), array([1.5798413], dtype=float32)] . model.predict([[10, 4]]) . array([[3.1647365]], dtype=float32) . model.predict(독립) . array([[ 1.0387847], [ 1.5659081], [ 3.1647375], [10.137856 ], [20.576534 ], [60.284546 ]], dtype=float32) . 종속 . 순익 . 0 1.0 | . 1 1.5 | . 2 3.0 | . 3 10.0 | . 4 20.0 | . 5 60.0 | . plt.plot(np.arange(1, 7), model.predict(독립)) plt.plot(np.arange(1, 7), 종속) plt.show() . &#48373;&#51105; &#45936;&#51060;&#53552;&#51032; &#55176;&#46304;&#47112;&#51060;&#50612; . 그럼 주가는 잘 맞출까? (곡선 형태) | . import numpy as np import pandas as pd import matplotlib.pyplot as plt 광고액 = [ np.random.randint(10, 50) + np.log(i*5) * 50 for i in range(1, 101) ] 계절성 = [ np.sin(i/3)*100 + i*3 + j*2 for i, j in zip(np.arange(1, 101), 광고액) ] 매출액 = [i**(np.log(np.log(i))) + j for i, j in zip(np.arange(1, 101), 계절성) ] plt.plot(np.arange(1, 101), 광고액, label=&#39;a&#39;) plt.plot(np.arange(1, 101), 계절성, label=&#39;b&#39;) plt.plot(np.arange(1, 101), 매출액, label=&#39;c&#39;) plt.legend() plt.show() . /usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: RuntimeWarning: divide by zero encountered in log import sys . 독립 = pd.DataFrame({ &#39;계절성&#39; : 계절성, &#39;광고액&#39; : 광고액 }) 종속 = pd.DataFrame({ &#39;매출액&#39; : 매출액 }) 독립.shape, 종속.shape . ((100, 2), (100, 1)) . import tensorflow as tf #모델 준비 X = tf.keras.layers.Input(shape=[2]) # 독립변수의 col H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(X) H = tf.keras.layers.Dense(5, activation=&#39;swish&#39;)(H) Y = tf.keras.layers.Dense(1)(H) # 종속변수의 col model = tf.keras.models.Model(X, Y) model.compile(loss=&#39;mse&#39;) # MSE(Mean squared error) . model.fit(독립, 종속, epochs=10000, verbose=0) model.fit(독립, 종속, epochs=10) . Epoch 1/10 4/4 [==============================] - 0s 3ms/step - loss: 41707.3164 Epoch 2/10 4/4 [==============================] - 0s 3ms/step - loss: 42124.0352 Epoch 3/10 4/4 [==============================] - 0s 3ms/step - loss: 41490.3359 Epoch 4/10 4/4 [==============================] - 0s 4ms/step - loss: 41539.5781 Epoch 5/10 4/4 [==============================] - 0s 5ms/step - loss: 41851.1367 Epoch 6/10 4/4 [==============================] - 0s 3ms/step - loss: 41690.7344 Epoch 7/10 4/4 [==============================] - 0s 4ms/step - loss: 42086.4453 Epoch 8/10 4/4 [==============================] - 0s 4ms/step - loss: 41468.6836 Epoch 9/10 4/4 [==============================] - 0s 2ms/step - loss: 41834.9766 Epoch 10/10 4/4 [==============================] - 0s 3ms/step - loss: 41542.3516 . &lt;tensorflow.python.keras.callbacks.History at 0x7f05ee2c5710&gt; . plt.plot(np.arange(1, 101), model.predict(독립)) plt.plot(np.arange(1, 101), 종속) plt.show() .",
            "url": "https://paullabkorea.github.io/jupyternotebookblog/fastpages/jupyter/test/2021/07/05/_06_30_(%EC%B5%9C%EC%A2%85_%EC%88%98%EC%A0%95)_%EC%86%90%EC%97%90_%EC%9E%A1%ED%9E%88%EB%8A%94_%EB%94%A5%EB%9F%AC%EB%8B%9D_%EA%B0%95%EC%9D%98%EC%9E%90%EB%A3%8C.html",
            "relUrl": "/fastpages/jupyter/test/2021/07/05/_06_30_(%EC%B5%9C%EC%A2%85_%EC%88%98%EC%A0%95)_%EC%86%90%EC%97%90_%EC%9E%A1%ED%9E%88%EB%8A%94_%EB%94%A5%EB%9F%AC%EB%8B%9D_%EA%B0%95%EC%9D%98%EC%9E%90%EB%A3%8C.html",
            "date": " • Jul 5, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://paullabkorea.github.io/jupyternotebookblog/deep%20learning/2020/06/28/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8.html",
            "relUrl": "/deep%20learning/2020/06/28/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%ED%85%8C%EC%8A%A4%ED%8A%B8.html",
            "date": " • Jun 28, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://paullabkorea.github.io/jupyternotebookblog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://paullabkorea.github.io/jupyternotebookblog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Us",
          "content": "기술의 교육 기회를 누구나 차등없이 받을 수 있게 대중화, 보편화, 시스템화 하는 것 . 우리는 교육 특권의 대중화, 고급 IT 기술의 상용화를 도모합니다. 또한 지역적 특성을 극복하고 ICT 지식에 대한 갈급함을 해소할 수 있도록 노력하고 있는 ICT 연구 및 (코딩)교육 기관이며 다양한 사회 공헌 활동을 하고 있습니다. . About us . Paul Lab . 바울랩은 제주도에 위치한 ICT 연구 및 (코딩)교육 기관으로 연구원, 학원, 출판사를 함께 운영하고 있습니다. . 진취적인 청년들이 경제적으로도 여유를 가지며 하고 싶은 연구를 할 수 있는 ‘연구의 場’, 연구의 경험과 결과를 열정과 책임으로 교육하는 ‘교육의 場’, 이로 인한 이익과 지식을 사회를 위하여 나누는 ‘나눔의 場’으로 회사와 학생, 사회의 상생을 도모합니다. . WeNiv(위니브) . 위니브는 “기술의 교육 기회를 누구나 차등 없이 받을 수 있게 대중화, 보편화, 시스템화 하는 것”에 설립 취지를 가지고 있습니다. . 지역 기반 ICT 대안 교육 플랫폼, 유료와 무료 ICT 영상 콘텐츠를 제작하며, 지역 교육 기회의 불평등, 접근성의 한계 등 기존 교육의 한계를 극복하기 위한 다양한 시도를 하고 있습니다. . 또한 지역 혁신을 위한 사회 공헌 활동을 지속적으로 진행 중에 있으며 대표적으로 “선선하다 프로젝트”, “We 드림(We Dream)” 프로젝트를 제주에서 진행 중에 있습 니다. . 선선하다 프로젝트는 각 학교 ICT 분야를 선도하고 있는 학생을 초청하여 무료로 ICT 교육, 교재 지원, 동영상 강의 지원을 통해, 학생이 학생을 가르치도록 독려하는 비영리 프로젝트이며 We드림은 가정 형편이 어려우신 분들을 위해 매년 100명을 선발하여 온라인 강좌를 제공하는 프로젝트입니다. . 제주코딩베이스캠프 . 제주코딩베이스캠프는 제주에서 가장 큰 ICT 교육 행사로 카카오, 구름, 제주산학 융합원 등 기업 및 지자체와 함께 진행하고 있습니다. 13기까지 진행된 이 행사는 경쟁률 10:1에 약 400여 명이 참여하였고 도내뿐만 아니라 도외에서도 주목받고 있는 무료 캠프입니다. . 또한 인프런, Edwith, 구름, 유튜브, 에듀캐스트 등의 교육 플랫폼에서 35개의 동영상 강좌를 제공하고 있으며 21년 2월 총 30,000명 이상의 수강생이 제주코딩베이스캠프의 강좌를 수강하고 있습니다. . 수료증 제도를 통한 나노디그리 시스템이 도입되어 있고, 수료를 한 학생에게는 취업 매칭, 콘텐츠 공동제작의 기회를 제공하고 있습니다. . 교육 커리큘럼과 수료증 제도 . .",
          "url": "https://paullabkorea.github.io/jupyternotebookblog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  

  

  
      ,"page5": {
          "title": "sample",
          "content": "테스트 . 테스트 페이지입니다. . 잘 작동하는지 봅니다. | 잘 작동하는지 봅니다. | 잘 작동하는지 봅니다. | 잘 작동하는지 봅니다. |",
          "url": "https://paullabkorea.github.io/jupyternotebookblog/sample/",
          "relUrl": "/sample/",
          "date": ""
      }
      
  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page13": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://paullabkorea.github.io/jupyternotebookblog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}